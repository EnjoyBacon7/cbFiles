# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Build

on:
  push:
    tags: 'v*'

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:

  replace_version:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v2

      - name: Extract tag version
        id: extract_tag
        run: echo ::set-output name=tag::${GITHUB_REF#refs/tags/}
      
      - name: Split tag
        id: split_tag
        run: |
          tag=${{ steps.extract_tag.outputs.tag }}
          prefix=$(echo $tag | cut -d '.' -f 1)
          suffix=$(echo $tag | cut -d '.' -f 2-)
          echo "::set-output name=prefix::$prefix"
          echo "::set-output name=suffix::$suffix"

      - name: Find and Replace Version Emoji
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "__APP_VER_EMOJI__"
          replace: $prefix
          regex: false

      - name: Find and Replace Version Number
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "__APP_VERSION__"
          replace: $suffix
          regex: false

      - name: Upload updated src code
        uses: actions/upload-artifact@v2
        with:
          name: src
          path: ./

  # Building react
  build-npm:
  
    needs: replace_version

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]


    steps:

      - name: Download updated src code
        uses: actions/download-artifact@v2
        with:
          name: src
          path: ./

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: './web/package-lock.json' 

      - run: cd ./web/

      - name: install npm
        working-directory: ./web/
        run: npm ci

      - run: npm run build --if-present
      
      # To be implemented once tests are added
      #- run: npm test --passWithNoTests

      - name: Archive client build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: ./web/build
      - run: ls

  # Building go code
  build-go:

    needs: 
      - build-npm
      - replace_version
  
    runs-on: ubuntu-latest
    steps:
    
      - name: Download updated src code
        uses: actions/download-artifact@v2
        with:
          name: src
          path: ./

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Download client build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build
          path: ./web/build

      - name: Build
        run: |
          mkdir cmd
          GOOS=linux GOARCH=arm64 go build -v -o cmd/cbFiles_linux_arm64 server/main.go
          GOOS=linux GOARCH=amd64 go build -v -o cmd/cbFiles_linux_x64 server/main.go
          GOOS=darwin GOARCH=arm64 go build -v -o cmd/cbFiles_macOS_arm64 server/main.go
          GOOS=darwin GOARCH=amd64 go build -v -o cmd/cbFiles_macOS_x64 server/main.go
          GOOS=windows GOARCH=amd64 go build -v -o cmd/cbFiles_windows_arm64 server/main.go
          GOOS=windows GOARCH=arm go build -v -o cmd/cbFiles_windows_x64 server/main.go

      # To implement once tests are in
      #- name: Test
      #  run: go test -v server main.go

      - name: Archive cmds
        uses: actions/upload-artifact@v2
        with:
          name: cmd
          path: ./cmd
      - run: ls
    
  release:

    needs: build-go
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v3

    - name: Download cmds
      uses: actions/download-artifact@v2
      with:
        name: cmd
        path: ./cmd
    - run: ls

    - uses: ncipollo/release-action@v1
      with:
        artifacts: "./cmd/*"
        bodyFile: "body.txt"
  
  build-and-push-image:

    needs: replace_version

    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      # 
    steps:
      
      - name: Download updated src code
        uses: actions/download-artifact@v2
        with:
          name: src
          path: ./

      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}